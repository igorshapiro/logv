{
  "name": "type-of-is",
  "version": "3.2.0",
  "description": "Determine and test types using constructor or {}.toString",
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/stephenhandley/type-of-is"
  },
  "bugs": {
    "url": "http://github.com/stephenhandley/type-of-is/issues"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "keywords": [
    "type",
    "types",
    "typeof",
    "toString",
    "type.of",
    "type.is"
  ],
  "directories": {
    "lib": ".",
    "test": "test"
  },
  "engines": {
    "node": ">=0.10.5"
  },
  "devDependencies": {
    "asserts": "4.0.x"
  },
  "author": {
    "name": "Stephen Handley",
    "email": "stephen.handley@gmail.com",
    "url": "http://person.sh"
  },
  "readme": "# Description\n\nSensible / unsurprising JavaScript type detection and comparison using a combination of ({}).toString and constructors.\n\n\n### Built in objects / primitives\n\n| obj                       | Type.of(obj)  | Type.is(...) === true         |\n| ------------------------- |:-------------:| ----------------------------- |\n| ```{ x : 2 }```           | Object        | ```Type.is(obj, Object)```    |\n| ```function () {}```      | Function      | ```Type.is(obj, Function)```  |\n| ```[1, 2, 3]```           | Array         | ```Type.is(obj, Array)```     |\n| ```\"barf\"```              | String        | ```Type.is(obj, String)```    |\n| ```true```                | Boolean       | ```Type.is(obj, Boolean)```   |\n| ```10```                  | Number        | ```Type.is(obj, Number)```    |\n| ```new Date()```          | Date          | ```Type.is(obj, Date)```      |\n| ```/abc/```               | RegExp        | ```Type.is(obj, RegExp)```    |\n| ```new Error(\"barf!\")```  | Error         | ```Type.is(obj, Error)```     |\n\n\n### Objects created via new\n\n```javascript\nfunction Person (name) {\n  this.name = name;\n}\nPerson.prototype.barf = function () {\n  return this.name + \" just barfed!\";\n};\n\nvar ralph = new Person('Ralph');\n\nType.of(ralph);                  // [Function: Person]\nType.is(ralph, Person);          // true\nType.is(ralph, Object);          // false\nType.instance(ralph, Person);    // true\nType.instance(ralph, Object);    // true\n```\n\n\n# Latest Version\n\n3.2.0\n\n\n# Installation\n\n```\nnpm install type-of-is\n```\n\nor in package.json\n\n```json\n{\n  ...\n  \"dependencies\": {\n    \"type-of-is\": \"3.2.x\"\n  }\n}\n```\n\n\n# Usage\n\n```javascript\nvar Type = require('type-of-is');\n\nType.of(obj);              // returns constructor type of an object\nType.string(obj);          // provides type as String\nType.is(obj, type);        // tests whether obj is of type (constructor or String)\nType.instance(obj, type);  // wrapper of \"obj instanceof type\"\n\n// The top level Type export delegates to Type.of or Type.is based on argument count\n\nType(obj) === Type.of(obj);\nType(obj, type) === Type.is(obj, type);\n```\n\n\n# More examples\n\n```javascript\nvar Type = require('type-of-is');\n\n// Type.of(arg) and Type(one_argument) return constructor of type\nconsole.log(Type.of('hi there ok'));  // [Function: String]\nconsole.log(Type.of(342));            // [Function: Number]\nconsole.log(Type.of({}));             // [Function: Object]\nconsole.log(Type.of([1, 2, 3]));      // [Function: Array]\nconsole.log(Type.of(null));           // null\nconsole.log(Type.of(undefined));      // undefined\nconsole.log(Type(true));              // [Function: Boolean]\nconsole.log(Type(function () {}));    // [Function: Function]\nconsole.log(Type(/abcd/));            // [Function: RegExp]\nconsole.log(Type(new Date()));        // [Function: Date]\nconsole.log(Type(new Error()));       // [Function: Error]\n\n// Type.string(arg) returns the string name of constructor\nconsole.log(Type.string('hi there ok'));  // \"String\"\nconsole.log(Type.string(342));            // \"Number\"\nconsole.log(Type.string({}));             // \"Object\"\nconsole.log(Type.string([1, 2, 3]));      // \"Array\"\nconsole.log(Type.string(null));           // \"Null\"\nconsole.log(Type.string(undefined));      // \"Undefined\"\nconsole.log(Type.string(true));           // \"Boolean\"\nconsole.log(Type.string(function () {})); // \"Function\"\nconsole.log(Type.string(/abcd/));         // \"RegExp\"\nconsole.log(Type.string(new Date()));     // \"Date\"\nconsole.log(Type.string(new Error()));    // \"Error\"\n\n// Type.is(object, type) and Type(object, type) tests object type\nconsole.log(Type.is(true, Boolean));      // true\nconsole.log(Type.is(\"1231\", Number));     // false\nconsole.log(Type.is(\"1231\", String));     // true\nconsole.log(Type.is(\"1231\", \"String\"));   // true\nconsole.log(Type.is(\"1231\", Object));     // false\nconsole.log(Type([], Object));            // false\nconsole.log(Type({}, Object));            // true\nconsole.log(Type([], Array));             // true\nconsole.log(Type(new Date(), Date));      // true\nconsole.log(Type(new Date(), Object));    // false\n\nvar s = \"hihihi\";\nvar Stringy = Type.of(s);\nvar t = new Stringy(\"hihihi\");\nconsole.log((s == t));                    // true\nconsole.log((s === t));                   // false\n\n\n// User defined objects should be instances of Objects but also can get actual constructor type\nfunction Person (name) {\n  this.name = name;\n}\nPerson.prototype.barf = function () {\n  return this.name + \" just barfed!\";\n};\n\nvar ralph = new Person('Ralph');\n\nconsole.log(Type.of(ralph));                 // [Function: Person]\nconsole.log(Type.is(ralph, Person));         // true\nconsole.log(Type.is(ralph, Object));         // false\nconsole.log(Type.instance(ralph, Person));   // true\nconsole.log(Type.instance(ralph, Object));   // true\n\n\n// arguments is weird edge case, there's no Arguments global but typeof arguments is \"arguments\"\n// type returned is Object, but not sure what would be preferable\n(function () {\n  console.log(Type.of(arguments));          // [Function: Object]\n})();\n\n\n// other built-ins\nconsole.log(Type.of(Infinity));    // [Function: Number]\nconsole.log(Type.of(-Infinity));   // [Function: Number]\nconsole.log(Type.of(NaN));         // [Function: Number]\nconsole.log(Type.of(Math));        // {}\nconsole.log(Type.of(JSON));        // {}\n\n\n// Returning constructor as type allows it to be used to create new objects i.e.\nvar s = \"s\";\nvar t = new Type.of(s)(\"t\");\nconsole.log(t.toUpperCase());   // \"T\"\n\n// Type.any(obj, [Array, Of, Types]) and Type(obj, [Array, Of, Types]) should test whether\n// the object is any of the passed in types\nvar str = 'hihihi';\nconsole.log(Type.any(str, [String, Number, Array])); // true\nconsole.log(Type(str, [Array, RegExp]));             // false\n\n// multi-frame dom\nvar iFrame = document.createElement('IFRAME');\ndocument.body.appendChild(iFrame);\nvar IFrameArray = window.frames[0].Array;\nvar array = new IFrameArray();\n\nconsole.log(array instanceof Array);        //false\nconsole.log(array instanceof IFrameArray);  //true;\nconsole.log(Type.of(array));                // Array\nconsole.log(Type.is(array, Array));         // false\nconsole.log(Type.is(array, \"Array\"));       // true\n\n```\n\n\n# Rationale\n\nTry to iron over some of the surprises in JavaScript type detection\n\n1. typeof is unreliable / surprising in multiple cases (Array -> object, null -> object, etc.)\n\n2. constructor checking is unreliable in multi-frame dom environments\n\n3. type comparison using strings whose string case / formatting differs from constructor names introduces unnecessary complexity\n\n4. ({}).toString returns \"[object Object]\" for objects created via new rather than constructor name called with new\n\n\n# Links\n\nhttp://ecma262-5.com/ELS5_HTML.htm\n\nhttp://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\nhttp://skilldrick.co.uk/2011/09/understanding-typeof-instanceof-and-constructor-in-javascript/\n\nhttp://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\n\nhttp://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\n\nhttp://www.2ality.com/2011/11/improving-typeof.html\n\n\n#Build status\n\n[![build status](https://secure.travis-ci.org/stephenhandley/type-of-is.png)](http://travis-ci.org/stephenhandley/type-of-is)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/stephenhandley/type-of-is",
  "_id": "type-of-is@3.2.0",
  "_shasum": "06717caa62197ffc3e62821a68448e064b5a8548",
  "_from": "type-of-is@",
  "_resolved": "https://registry.npmjs.org/type-of-is/-/type-of-is-3.2.0.tgz"
}
